func(ctx context.Context, cmd *urfavecli.Command) error {
    {{- if or (.FixedEnumeratedArgs) (.VariadicEnumeratedArgs) (.FixedEnumeratedFlags) (.VariadicEnumeratedFlags)}}
    var validChoice bool
    {{- end}}
    {{- if .Arguments}}
    var args {{.Name | PascalCase}}Args

    {{- /* ADD ARGUMENTS */}}
    {{- range $i, $arg := .Arguments}}
    {{- /* ENSURE REQUIRED ARGS */}}
    {{- if $arg.Required }}
    if cmd.NArg() < {{Inc $i}} {
      return errors.New("missing required arg <{{.Name | EscapeString}}>")
    }
    {{- end}}

    {{- if .Variadic.Enabled}}
    args.{{.Name | PascalCase}} = strings.Split(cmd.Args().Get({{$i}}), "{{.Variadic.SeparatorSep}}")
    {{- else}}
    args.{{.Name | PascalCase}} = cmd.Args().Get({{$i}})
    {{- end}}
    {{- /* ENSURE ENUMERATION ARGS */}}
    {{- if .Choices}}

    {{- if .Variadic.Enabled}}
    validChoice = validateChoicesSlice(
      []string{
        {{- range .Choices}}
        "{{.Value | EscapeString}}",
        {{- end}}
      },
      args.{{.Name | PascalCase}},
    )
    {{- else}}
    validChoice = validateChoices(
      []string{
        {{- range .Choices}}
        "{{.Value | EscapeString}}",
        {{- end}}
      },
      args.{{.Name | PascalCase}},
    )
    {{- end}}
    if !validChoice {
      return errors.New("Invalid value for argument <{{.Name | EscapeString}}>")
    }

    {{- end}}
    {{- end}}

    {{- end}}
    {{- if .Flags}}
    
    var flags {{.Name | PascalCase}}Flags

    {{- /* ADD FLAGS */}}
    {{- range .Flags}}
    flags.{{.Name | PascalCase}} = cmd.{{if .Variadic.Enabled}}StringSlice{{else if eq .Type "string"}}String{{else}}Bool{{end}}("{{.Name | EscapeString}}")

    {{- /* ENSURE ENUMERATION Flags */}}
    {{- if .Choices}}

    {{- if .Variadic.Enabled}}
    validChoice = validateChoicesSlice(
      []string{
        {{- range .Choices}}
        "{{.Value | EscapeString}}",
        {{- end}}
      },
      flags.{{.Name | PascalCase}},
    )
    {{- else}}
    validChoice = validateChoices(
      []string{
        {{- range .Choices}}
        "{{.Value | EscapeString}}",
        {{- end}}
      },
      flags.{{.Name | PascalCase}},
    )
    {{- end}}
    if !validChoice {
      return errors.New("Invalid value for argument --{{.Name | EscapeString}}")
    }

    {{- end}}
    {{- end}}
    {{- end}}

    return impl.{{.Name | PascalCase}}(ctx, cmd{{if .Arguments}}, args{{end}}{{if .Flags}}, flags{{end}})
  }