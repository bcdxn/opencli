{{template "command" . }}

{{define "command" -}}{{- $node := . }}

{{- range $i, $subCmd := $node.Commands}}
{{template "command" $subCmd}}
{{- end}}
  // `{{$node.Command.Line | EscapeString}}`
  {{$node.Command.Name | CamelCase}}Cmd := &urfavecli.Command{
    Name: "{{$node.Name | EscapeString}}",{{if $node.Command.Summary}}
    Usage: "{{$node.Command.Summary | EscapeString}}",{{end}}
    UsageText: "{{$node.Command.Line | EscapeString}}",{{if $node.Command.Description}}
    Description: "{{$node.Command.Description | EscapeString}}",{{end}}{{if not $node.Command.Group}}
    Action: func(ctx context.Context, cmd *urfavecli.Command) error {
      {{- template "action" $node.Command}}
    },
    {{- end}}
  }
  {{if $node.Commands}}// Add {{$node.Command.Name | CamelCase}}Cmd subcommands
  {{$node.Command.Name | CamelCase}}Cmd.Commands = []*urfavecli.Command{
  {{- range $i, $subCmd := $node.Commands}}
    {{$subCmd.Command.Name | CamelCase}}Cmd,
  {{- end}}
  }
{{end -}}{{- end -}}{{/* End of command sub-template definition */ -}}

{{/* Define action function body */}}
{{- define "action" -}}
{{template "arguments" .}}
{{if .Flags}}
      flags := {{.Name | PascalCase}}Flags{}
{{end}}
      return impl.{{.Name | PascalCase}}(ctx, cmd{{if .Arguments}}, args{{end}}{{if .Flags}}, flags{{end}})
{{- end -}}

{{/* Define Argument object intiailzation */}}
{{- define "arguments" -}}
{{if .Arguments}}
      {{range $i, $arg := .Arguments}}{{if $arg.Required}}
      if cmd.NArg() < {{Inc $i}} {
        return fmt.Errorf("missing required argument %s", "<{{$arg.Name}}>")
      }{{end}}{{end}}
      args := {{.Name | PascalCase}}Args{ {{range $i, $arg := .Arguments}}
        {{$arg.Name | PascalCase}}: cmd.Args().Get({{$i}}),
      {{- end}}
      }
{{- end -}}
{{- end}}