// Code generated by ocli-codegen DO NOT EDIT.
// Package {{.Opts.GoPackage}} provides primitives to interact with the Open CLI Spec-Compliant CLI.

package {{.Opts.GoPackage}}

{{- if .Doc.Arguments}}

/* CLI argument types
------------------------------------------------------------------------------------------------- */

{{- template "command_args" .Doc.CommandTrie.Root}}
{{- end}}

{{- define "command_args"}}
{{- if .Command.Arguments}}

// {{.Command.Name | PascalCase}}Args holds the parsed arguments that will be injected into the command handler implementation.
type {{.Command.Name | PascalCase}}Args struct {
{{- range .Command.Arguments}}
  {{.Name | PascalCase}} {{if .Variadic}}[]{{end}}{{if eq .Type "string"}}string{{else}}bool{{end}}
{{- end}}
}
{{- end}}

{{- range .Commands}}
{{- template "command_args" .}}
{{- end}}

{{- end}}

{{- if .Doc.Flags}}

/* CLI flag types
------------------------------------------------------------------------------------------------- */

{{- template "command_flags" .Doc.CommandTrie.Root}}
{{- end}}

{{- define "command_flags"}}
{{- if .Command.Flags}}

// {{.Command.Name | PascalCase}}Flags holds the parsed flags that will be injected into the command handler implementation.
type {{.Command.Name | PascalCase}}Flags struct {
{{- range .Command.Flags}}
  {{.Name | PascalCase}} {{if .Variadic}}[]{{end}}{{if eq .Type "string"}}string{{else}}bool{{end}}
{{- end}}
}
{{- end}}

{{- range .Commands}}
{{- template "command_flags" .}}
{{- end}}

{{- end}}

{{- if or (.Doc.FixedEnumeratedArgs) (.Doc.FixedEnumeratedFlags)}}

func validateChoices(choices []string, val string) bool {
	for _, choice := range choices {
		if choice == val {
			return true
		}
	}

	return false
}
{{- end}}


{{- if or (.Doc.VariadicEnumeratedArgs) (.Doc.VariadicEnumeratedFlags)}}

func validateChoicesSlice(choices []string, values []string) bool {
	for _, val := range values {
		valid := false
		for _, choice := range choices {
			if choice == val {
				valid = true
				break
			}
		}
		if !valid {
			return false
		}
	}
	return true
}
{{- end}}
