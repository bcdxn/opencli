// Package {{.Opts.Package}} provides primitives to interact with the Open CLI Spec-Compliant CLI.
//
// Code generated by ocli-codegen DO NOT EDIT.
package {{.Opts.Package}}

{{- if .Doc.Arguments}}

/* CLI argument types
------------------------------------------------------------------------------------------------- */

{{- range $i, $cmd := .Doc.Commands}}
{{- if not .Group}}
{{- if .Arguments}}

// {{.Name | PascalCase}}Args holds the parsed arguments that will be injected into the command handler implementation.
type {{.Name | PascalCase}}Args struct {
{{- range .Arguments}}
  {{.Name | PascalCase}} {{if .Variadic}}[]{{end}}{{if eq .Type "string"}}string{{else}}bool{{end}}
{{- end}}
}

{{- end}}
{{- end}}
{{- end}}
{{- end}}


{{- if .Doc.Flags}}

/* CLI flag types
------------------------------------------------------------------------------------------------- */

{{- range $i, $cmd := .Doc.Commands}}
{{- if not .Group}}
{{- if .Flags}}

// {{.Name | PascalCase}}Flag holds the parsed arguments that will be injected into the command handler implementation.
type {{.Name | PascalCase}}Flags struct {
{{- range .Flags}}
  {{.Name | PascalCase}} {{if .Variadic}}[]{{end}}{{if eq .Type "string"}}string{{else}}bool{{end}}
{{- end}}
}

{{- end}}
{{- end}}
{{- end}}
{{- end}}

{{- if or (.Doc.FixedEnumeratedArgs) (.Doc.FixedEnumeratedFlags)}}
func validateChoices(choices []string, val string) bool {
	for _, choice := range choices {
		if choice == val {
			return true
		}
	}

	return false
}
{{- end}}

{{- if or (.Doc.VariadicEnumeratedArgs) (.Doc.VariadicEnumeratedFlags)}}
func validateChoicesSlice(choices []string, values []string) bool {
	for _, val := range values {
		valid := false
		for _, choice := range choices {
			if choice == val {
				valid = true
				break
			}
		}
		if !valid {
			return false
		}
	}
	return true
}

{{- end}}
