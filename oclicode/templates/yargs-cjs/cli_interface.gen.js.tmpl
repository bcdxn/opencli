// Defines the interface that must be implemented to interact with the Open CLI Spec-Compliant CLI.
//
// Code generated by ocli-codegen DO NOT EDIT.

/**
 * Interface that must be implemented to handle the CLI commands.
 * 
 * @interface
 */
class CliHandlersInterface {
  constructor() {}
  {{- template "cmd_interface_func" .Doc.CommandTrie.Root}}
}

module.exports.CliHandlersInterface = CliHandlersInterface;

{{- define "cmd_interface_func" }}
{{- if not .Command.Group}}
 /**
  * Handles the invocation of:
  * 
  * ```sh
  * {{.Command.Line}}
  * ```
  * @param {yargs.Argv<{}>} yargv - The result of yargs parsing the argv.
  {{- if .Command.Arguments}}{{/* BEGIN ARGS JSDOC */}}
  * @param {object} args - Named positional argument parameters
  {{- range .Command.Arguments}}
  * @param {{"{"}}{{.Type}}{{"}"}} {{template "arg_param_name" .}}{{if .Summary}} - {{.Summary}}{{end}}
  {{- end}}
  {{- end}}{{/* END ARGS JSDOC */}}
  {{- if .Command.Flags}}{{/* BEGIN FLAGS JSDOC */}}
  * @param {object} flags - Named flag parameters
  {{- range .Command.Flags}}
  * @param {{"{"}}{{.Type}}{{"}"}} {{template "flag_param_name" .}}{{if .Summary}} - {{.Summary}}{{end}}
  {{- end}}
  {{- end}}{{/* END FLAGS JSDOC */}}
  */
  async {{.Command.Name | CamelCase}}(yargv
  {{- if .Command.Arguments -}}
  , args
  {{- end -}}{{- if .Command.Flags -}}
  , flags
  {{- end -}}
  ) {
    return Promise.reject(new Error('Not Implemented - `{{.Command.Name | CamelCase}}` command handler is not implemented'));
  }
{{- end}}

{{- range .Commands}}
{{template "cmd_interface_func" .}}
{{- end}}

{{- end}}

{{- define "arg_param_name" -}}
{{if not .Required}}[{{end}}args.{{.Name | CamelCase}}{{if .Default}}={{.Default}}{{end}}{{if not .Required}}]{{end}}
{{- end}}

{{- define "flag_param_name" -}}
{{if not .Required}}[{{end}}flags.{{.Name | CamelCase}}{{if .Default.IsSet}}={{if eq .Type "string"}}{{.Default.String}}{{else}}{{.Default.Bool}}{{end}}{{end}}{{if not .Required}}]{{end}}
{{- end}}