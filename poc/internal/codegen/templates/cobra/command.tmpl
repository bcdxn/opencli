{{/*
Generate private functions that return cobra commands. These functions include the declaration of
the `cobra.Command` object itself and add all nested subcommands recursively. Expose the runnable
root command of the CLI.
*/}}

// New returns the root executable CLI command. e.g.:
// ```go
// app := cli.New(handlersImpl)
// app.ExecuteContext(context.Background())
// ```
func New(handlers CLIInterface) *cobra.Command {
	return {{(index .Commands 0).CommandFnName}}(handlers)
}

{{define "template.commandFn"}}

{{template "flags_parameters_type.tmpl" .}}

// {{.CommandFnName}} returns a cobra command for the `{{.Name}}` command with subcommands
// added appropriately.
func {{.CommandFnName}}(handlers CLIInterface) *cobra.Command {
  {{template "flags_vars_block.tmpl" .}}
  // Create the cobra command
  cmd := cobra.Command{
    Use: "{{.Name}}",
    {{if .Summary}}Short: "{{.Summary}}",{{- else -}}{{end}}
    {{if .Executable}}RunE: func(cmd *cobra.Command, args []string) error {
      {{range $i, $val := .PositionalArgs -}}
      {{- if $val.Required -}}
      if len(args) < {{add $i 1}} {
        return errors.New("required positional arg ${{$i}} '{{$val.Name}}' is missing")
      }
      {{end}}
      {{- end -}}

      {{if .Flags}}
      flags := {{.HandlerFnName}}Flags{
        {{- range $i, $val := .Flags}}
        {{.FlagPropName}}: flag{{.FlagPropName}},
        {{- end}}
      }
      {{end}}
      return handlers.{{.HandlerFnName}}(cmd.Context(){{if .PositionalArgs}}, args{{end}}{{if .Flags}}, flags{{end}})
    },{{- else -}}
    // Not runnable
    {{- end}}
  }
  {{template "flags_add_to_command.tmpl" .}}
  {{- if .Subcommands -}}
  // Add subcommands
  {{- end -}}
  {{- range $i, $val := .Subcommands}}
  cmd.AddCommand({{$val.CommandFnName}}(handlers))
  {{- end}}
  // Return initialized command
  return &cmd
}
  {{- range $i, $val := .Subcommands -}}
    {{- template "template.commandFn" ($val) -}}
  {{- end -}}
{{- end -}}

{{- range $i, $val := .Commands -}}
  {{- template "template.commandFn" ($val) -}}
{{- end}}