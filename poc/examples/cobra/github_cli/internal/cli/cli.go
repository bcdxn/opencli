// // generated code
// package cli

// import (
// 	"context"

// 	"github.com/spf13/cobra"
// )

// type CLIHandlersImplementation interface {
// 	GhRoot(cmd *cobra.Command, args []string) error
// 	// alias grouping
// 	GhAliasRoot(cmd *cobra.Command, args []string) error
// 	GhAliasDelete(cmd *cobra.Command, args []string) error
// 	// gist grouping
// 	GhGistRoot(cmd *cobra.Command, args []string) error
// 	GhGistClone(cmd *cobra.Command, args []string) error
// 	GhGistCreate(tx context.Context, args GhGistCreateArgs, flags GhGistCreateFlags) error
// }

// func FromCobra(handlers CLIHandlersImplementation) *cobra.Command {
// 	return cmdRoot(handlers)
// }

// func cmdRoot(handlers CLIHandlersImplementation) *cobra.Command {
// 	root := cobra.Command{
// 		Use:   "gh",
// 		Short: "Work seamlessly with GitHub from the command line.",
// 		RunE:  handlers.GhRoot,
// 	}

// 	root.AddCommand(cmdAliasRoot(handlers))
// 	root.AddCommand(cmdGistRoot(handlers))

// 	return &root
// }

// func cmdAliasRoot(handlers CLIHandlersImplementation) *cobra.Command {
// 	cmd := cobra.Command{
// 		Use:   "alias {command} <arguments> [flags]",
// 		Short: "Aliases can be used to make shortcuts for gh commands or to compose multiple commands.",
// 		RunE:  handlers.GhAliasRoot,
// 	}

// 	cmd.AddCommand(cmdAliasDelete(handlers))

// 	return &cmd
// }

// func cmdAliasDelete(handlers CLIHandlersImplementation) *cobra.Command {
// 	cmd := cobra.Command{
// 		Use:   "delete (<alias> | --all) [flags]",
// 		Short: "Delete set aliases",
// 		RunE:  handlers.GhAliasDelete,
// 	}

// 	return &cmd
// }

// func cmdGistRoot(handlers CLIHandlersImplementation) *cobra.Command {
// 	cmd := cobra.Command{
// 		Use:   "gist {command} <arguments> [flags]",
// 		Short: "Work with GitHub gists.",
// 		RunE:  handlers.GhGistRoot,
// 	}

// 	cmd.AddCommand(cmdGistClone(handlers))
// 	cmd.AddCommand(cmdGistCreate(handlers))

// 	return &cmd
// }

// func cmdGistClone(handlers CLIHandlersImplementation) *cobra.Command {
// 	cmd := cobra.Command{
// 		Use:   "clone <gist> [<directory>] [-- <gitflags>...]",
// 		Short: "Clone a GitHub gist locally",
// 		RunE:  handlers.GhGistClone,
// 	}

// 	return &cmd
// }

// // named positional arguments
// type GhGistCreateArgs struct {
// 	Filename []string
// }

// // flags
// type GhGistCreateFlags struct {
// 	Desc   string
// 	Public bool
// }

// func cmdGistCreate(handlers CLIHandlersImplementation) *cobra.Command {
// 	var desc string
// 	var public bool

// 	cmd := cobra.Command{
// 		Use:   "create [<filename>... | -] [flags]",
// 		Short: "Create a new GitHub gist with given contents.",
// 		RunE: func(cmd *cobra.Command, args []string) error {
// 			flags := GhGistCreateFlags{
// 				Desc:   desc,
// 				Public: public,
// 			}
// 			return handlers.GhGistCreate(cmd.Context(), GhGistCreateArgs{}, flags)
// 		},
// 	}

// 	cmd.Flags().StringVarP(&desc, "desc", "d", "", "A description for this gist")
// 	cmd.Flags().BoolVarP(&public, "public", "p", false, `List the gist publicly (default "secret")`)

// 	return &cmd
// }

// Package cli provides primitives to interact with the Open CLI Spec-Compliant CLI.
//
// Code generated by ocli-codegen DO NOT EDIT.
package cli

import (
	"context"

	"github.com/spf13/cobra"
)

// CLIInterface represents all CLI command handlers.
type CLIInterface interface {
  // GhAliasDelete is the handler function run when a particular command is invoked
  GhAliasDelete(ctx context.Context, flags GhAliasDeleteFlags) error
  // GhAliasSet is the handler function run when a particular command is invoked
  GhAliasSet(ctx context.Context, flags GhAliasSetFlags) error
}



// New returns the root executable CLI command. e.g.:
// ```go
// app := cli.New(handlersImpl)
// app.ExecuteContext(context.Background())
// ```
func New(handlers CLIInterface) *cobra.Command {
	return cmdGh(handlers)
}





// cmdGh returns a cobra command for the `gh` command with subcommands
// added appropriately.
func cmdGh(handlers CLIInterface) *cobra.Command {
  
  // Create the cobra command
  cmd := cobra.Command{
    Use: "gh",
    Short: "Work seamlessly with GitHub from the command line.",// Not runnable
  }
  
  // Add subcommands
  cmd.AddCommand(cmdGhAlias(handlers))
  // Return initialized command
  return &cmd
}



// cmdGhAlias returns a cobra command for the `alias` command with subcommands
// added appropriately.
func cmdGhAlias(handlers CLIInterface) *cobra.Command {
  
  // Create the cobra command
  cmd := cobra.Command{
    Use: "alias",
    Short: "Create command shortcuts",// Not runnable
  }
  
  // Add subcommands
  cmd.AddCommand(cmdGhAliasDelete(handlers))
  cmd.AddCommand(cmdGhAliasSet(handlers))
  // Return initialized command
  return &cmd
}

// GhAliasDeleteFlags holds the parsed flag options that will be injected into the command
// handler implementation.
type GhAliasDeleteFlags struct {
  All bool
}

// cmdGhAliasDelete returns a cobra command for the `delete {<alias> | --all} [flags]` command with subcommands
// added appropriately.
func cmdGhAliasDelete(handlers CLIInterface) *cobra.Command {
  // Instantiate flags
  var varAll bool
  // Create the cobra command
  cmd := cobra.Command{
    Use: "delete {<alias> | --all} [flags]",
    Short: "Delete set aliases",RunE: func(cmd *cobra.Command, args []string) error {
      
      flags := GhAliasDeleteFlags{
        All: varAll,
      }
      
      return handlers.GhAliasDelete(cmd.Context(), flags)
    },
  }
  
  // Add command flags
  cmd.Flags().BoolVar(&varAll, "all", false, "Delete all aliases")

  // Return initialized command
  return &cmd
}

// GhAliasSetFlags holds the parsed flag options that will be injected into the command
// handler implementation.
type GhAliasSetFlags struct {
  Clobber bool
  Shell bool
}

// cmdGhAliasSet returns a cobra command for the `set <alias> <expansion> [flags]` command with subcommands
// added appropriately.
func cmdGhAliasSet(handlers CLIInterface) *cobra.Command {
  // Instantiate flags
  var varClobber bool
  var varShell bool
  // Create the cobra command
  cmd := cobra.Command{
    Use: "set <alias> <expansion> [flags]",
    Short: "Define a word that will expand to a full gh command when invoked.",RunE: func(cmd *cobra.Command, args []string) error {
      
      flags := GhAliasSetFlags{
        Clobber: varClobber,
        Shell: varShell,
      }
      
      return handlers.GhAliasSet(cmd.Context(), flags)
    },
  }
  
  // Add command flags
  cmd.Flags().BoolVar(&varClobber, "clobber", false, "Overwrite existing aliases of the same name")

  cmd.Flags().BoolVarP(&varShell, "shell", "s", false, "Declare an alias to be passed through a shell interpreter")

  // Return initialized command
  return &cmd
}
