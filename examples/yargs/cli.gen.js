// Code generated by ocli-codegen DO NOT EDIT.
// Defines the interface that must be implemented to interact with the Open CLI Spec-Compliant CLI.

const yargs = require('yargs');
const { hideBin } = require('yargs/helpers');
require('./cli-interface.gen');

/**
 * Cli represents a configured command line interface App that can be run.
 *
 * @class
 */
class Cli {
  /**
   * Create a new instance of the CLI that can be run, e.g:
   *
   * ```js
   * #!/usr/bin/env node
   * // index.js
   * const { Cli } = require('./cli/cli.gen');
   * const { impl } = require('./your-implementation');
   *
   * async function main() {
   *   const version = '1.0.0';
   *   let cli = new Cli(impl, version);
   * 
   *   cli.new(handlers, version).parseAsync();
   *   return cli.run();
   * }
   *
   * main();
   * ```
   *
   * @param {CliHandlersInterface} impl - The class implementing all of the command handlers
   * @param {string} version - The version of the CLI to display for the `--version` flag
   * @returns {yargs.Argv<{}>} - The yargs object ready to be parsed
   */
  constructor(impl, version) {
    this._yargs = newCli(impl, version)
  }

  /**
   * Get direct access to the underlying yargs object.
   *
   * @returns {yargs.Argv<{}>}
   */
  yargs() {
    return this._yargs
  }

  /**
   * Run the CLI.
   *
   * @returns Promise<>
   */
  async run() {
    return this._yargs.parseAsync()
  }
}

module.exports.Cli = Cli

/**
 * Create a new instance of the CLI that can be run.
 *
 * @param {CliHandlersInterface} impl - The class implementing all of the command handlers
 * @param {string} version - The version of the CLI to display for the `--version` flag
 * @returns {yargs.Argv<{}>} - The yargs object ready to be parsed
 */
function newCli(impl, version) {
  
  let pleasantriesFarewellCmd = {};
  pleasantriesFarewellCmd.command = "farewell";
  pleasantriesFarewellCmd.describe = "Say goodbye";
  // add builder function
  pleasantriesFarewellCmd.builder = function (yargs) {
    return yargs
      .usage("pleasantries farewell <name> [flags]")
      .positional("<name>", {
        describe: "A name to include in the farewell",
        type: "string"
      })
      .option("language", {
        describe: "The language of the greeting",
        choices: ["english", "spanish"],
        default: "english",
        type: "string"
      })
  }
  
  
  // add handler function
  pleasantriesFarewellCmd.handler = function (yargv) {
    const args = {
      name: yargv._[1]
    };
    if (yargv._.length < 2) {
      let e = new Error("Missing required argument: name");
      e.code = 2;
      return Promise.reject(e);
    }
    const flags = {
      language: yargv["language"]
    };
    return impl.pleasantriesFarewell(yargv, args, flags)
  }
  
  let pleasantriesGreetCmd = {};
  pleasantriesGreetCmd.command = "greet";
  pleasantriesGreetCmd.describe = "Say hello";
  // add builder function
  pleasantriesGreetCmd.builder = function (yargs) {
    return yargs
      .usage("pleasantries greet <name> [flags]")
      .positional("<name>", {
        describe: "A name to include the greeting",
        type: "string"
      })
      .option("language", {
        describe: "The language of the greeting",
        choices: ["english", "spanish"],
        default: "english",
        type: "string"
      })
  }
  
  
  // add handler function
  pleasantriesGreetCmd.handler = function (yargv) {
    const args = {
      name: yargv._[1]
    };
    if (yargv._.length < 2) {
      let e = new Error("Missing required argument: name");
      e.code = 2;
      return Promise.reject(e);
    }
    const flags = {
      language: yargv["language"]
    };
    return impl.pleasantriesGreet(yargv, args, flags)
  }

  return yargs(hideBin(process.argv)).scriptName("pleasantries")
    .usage("pleasantries {command} <name> [flags]")
    .command(pleasantriesFarewellCmd)
    .command(pleasantriesGreetCmd)
    .help()
    .version(version)
    .fail(async (msg, err, yargs) => {
      if (msg) {
        console.log(yargs.help())
        console.log("\n", "Error", "-", msg);

        if (/^invalid values:/i.test(msg)) {
          process.exit(2);
        } else if (/^missing required argument/i.test(msg)) {
          process.exit(2);
        } else {
          process.exit(1);
        }
      } else if (err) {
        console.log(yargs.help());
        console.log("\n", err.name, "-", err.message);
        process.exit(err.code ?? 1);
      }
    });
}

/**
 * Force the node process to exit with the given code.
 *
 * @param {number} code The exit code that will be returned to the calling shell
 * @param {string} [msg] The error message to display before exiting
 */
function exitCli(code, msg) {
  if (msg) {
    console.log(msg);
  }

  process.exit(code);
}
