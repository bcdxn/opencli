package oclidocs

import (
	"bytes"
	"embed"
	"fmt"
	"text/template"

	"github.com/bcdxn/opencli/oclispec"
)

// GenDocsOption is a functional option to configure the GenDocs function
type GenDocsOption func(*genDocsOptions)

// Generate generates documentation for the given OpenCLI document in the specified format.
// It accepts the OpenCLI document domain object and the desired output format for the documentation as parameters.
// It returns the generated documentation as a byte slice.
func Generate(doc oclispec.Document, options ...GenDocsOption) ([]GenFile, error) {
	opts := &genDocsOptions{
		Format:        "markdown",
		IncludeBadge:  true,
		IncludeFooter: true,
	}

	for _, option := range options {
		option(opts)
	}

	tmpl := getDocsTemplate("markdown")
	buf := bytes.NewBuffer([]byte{})

	// Note that various docs formats may have multiple template files depending on the complexity.
	// `docs.tmpl`, however, always serves as the entrypoint.
	err := tmpl.ExecuteTemplate(buf, "docs.tmpl", docsTmplData{*opts, doc})
	if err != nil {
		panic(err)
	}

	return []GenFile{
		{
			Name:     "docs.gen.md",
			Contents: buf.Bytes(),
		},
	}, nil
}

// WithoutFooter option will remove the `generated by OpenCLI` footer appended to the documents by default.
func WithoutFooter() GenDocsOption {
	return func(opts *genDocsOptions) {
		opts.IncludeFooter = false
	}
}

// WithoutBadge option will remove shields.io badget that indicates compliance with the OpenCLI Spec prepended to markdown documents by default.
func WithoutBadge() GenDocsOption {
	return func(opts *genDocsOptions) {
		opts.IncludeBadge = false
	}
}

type GenFile struct {
	Name     string
	Contents []byte
}

/* Private functions and types
------------------------------------------------------------------------------------------------- */

// genDocsOptions represents the configurable options when generating documentation.
// The options are meant to be configured using the functional options pattern.
type genDocsOptions struct {
	Format        string
	IncludeBadge  bool
	IncludeFooter bool
}

// docsTmplData represents the data used to render the documentation template.
type docsTmplData struct {
	Opts genDocsOptions
	Doc  oclispec.Document
}

//go:embed templates/*
var docsTemplates embed.FS

// getTemplate reads the format-appropariate template file(s) into memory -- a prerequisite for generating the documentation.
func getDocsTemplate(format string) *template.Template {
	// Templates for a specific format are stored in a subdirectory with the name of the format nested within `templates/docs/`.
	t, err := template.New("tmpl").ParseFS(
		docsTemplates,
		fmt.Sprintf("templates/%s/*", format),
	)
	if err != nil {
		panic(err)
	}

	return t
}
